{"registers": {"0": [["  local function read_project(data)\n    local res = {}\n    data = string.gsub(data, '%z', '')\n    local dump = assert(loadstring(data))\n    local list = dump()\n    if list then\n      list = vim.list_slice(list, #list - config.project.limit)\n    end\n    for _, dir in ipairs(list or {}) do\n      dir = dir:gsub(vim.env.HOME, '~')\n      table.insert(res, (' '):rep(3) .. '\uf401 ' .. dir)\n    end\n\n    if #res == 0 then\n      table.insert(res, (' '):rep(3) .. '\uf401 empty project')\n    else\n      reverse(res)\n    end\n\n    table.insert(res, 1, config.project.icon .. config.project.label)\n    table.insert(res, 1, '')\n    table.insert(res, '')\n    return res\n  end\n"], true], "1-9": [[["        { icon = \"\uf07c \", title = \"Projects\", section = \"projects\", indent = 2, padding = 1 },\n"], true], [["        { icon = \"\uf15b \", title = \"Recent Files\", section = \"recent_files\", indent = 2, padding = 1 },\n"], true], [["      { section = \"projects\" },\n        { section = \"recent_files\" },"], false], [["[[ -e ~/.profile ]] && emulate sh -c 'source ~/.profile'\n"], true], [["source ~/.profile\n"], true], [["# User specific aliases and functions\nif [ -d ~/.bashrc.d ]; then\n  for rc in ~/.bashrc.d/*; do\n    if [ -f \"$rc\" ]; then\n      . \"$rc\"\n    fi\n  done\nfi\nunset rc\n\n#for starship\nshow_newline() {\n  if [ -z \"$NEW_LINE_BEFORE_PROMPT\" ]; then\n    NEW_LINE_BEFORE_PROMPT=1\n  # elif [ \"$NEW_LINE_BEFORE_PROMPT\" -eq 1 ]; then\n  #   echo \"\"\n  fi\n}\nPROMPT_COMMAND=\"show_newline\"\neval \"$(starship init bash)\" #for starship\n\n#binary paths\nexport PATH=\"$PATH:/home/niraj/developmemt/flutter/bin\"\nexport ANDROID_HOME=$HOME/android\nexport PATH=$ANDROID_HOME/cmdline-tools/tools/bin/:$PATH\nexport PATH=$ANDROID_HOME/emulator/:$PATH\nexport PATH=$ANDROID_HOME/platform-tools/:$PATH\nexport PATH=~/.cargo/bin/:$PATH\nexport PATH=\"$PATH:/opt/nvim-linux64/bin\"\n\n#aliases\nalias cls='clear'\nalias nv='neovide'\nalias tma='tmux attach'\n\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\n. \"$HOME/.cargo/env\"\n\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"                   # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion\n"], false], [["--[[\n\n=====================================================================\n==================== READ THIS BEFORE CONTINUING ====================\n=====================================================================\n========                                    .-----.          ========\n========         .----------------------.   | === |          ========\n========         |.-\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"-.|   |-----|          ========\n========         ||                    ||   | === |          ========\n========         ||   KICKSTART.NVIM   ||   |-----|          ========\n========         ||                    ||   | === |          ========\n========         ||                    ||   |-----|          ========\n========         ||:Tutor              ||   |:::::|          ========\n========         |'-..................-'|   |____o|          ========\n========         `\"\")----------------(\"\"`   ___________      ========\n========        /::::::::::|  |::::::::::\\  \\ no mouse \\     ========\n========       /:::========|  |==hjkl==:::\\  \\ required \\    ========\n========      '\"\"\"\"\"\"\"\"\"\"\"\"'  '\"\"\"\"\"\"\"\"\"\"\"\"'  '\"\"\"\"\"\"\"\"\"\"'   ========\n========                                                     ========\n=====================================================================\n=====================================================================\n\nWhat is Kickstart?\n\n  Kickstart.nvim is *not* a distribution.\n\n  Kickstart.nvim is a starting point for your own configuration.\n    The goal is that you can read every line of code, top-to-bottom, understand\n    what your configuration is doing, and modify it to suit your needs.\n\n    Once you've done that, you can start exploring, configuring and tinkering to\n    make Neovim your own! That might mean leaving Kickstart just the way it is for a while\n    or immediately breaking it into modular pieces. It's up to you!\n\n    If you don't know anything about Lua, I recommend taking some time to read through\n    a guide. One possible example which will only take 10-15 minutes:\n      - https://learnxinyminutes.com/docs/lua/\n\n    After understanding a bit more about Lua, you can use `:help lua-guide` as a\n    reference for how Neovim integrates Lua.\n    - :help lua-guide\n    - (or HTML version): https://neovim.io/doc/user/lua-guide.html\n\nKickstart Guide:\n\n  TODO: The very first thing you should do is to run the command `:Tutor` in Neovim.\n\n    If you don't know what this means, type the following:\n      - <escape key>\n      - :\n      - Tutor\n      - <enter key>\n\n    (If you already know the Neovim basics, you can skip this step.)\n\n  Once you've completed that, you can continue working through **AND READING** the rest\n  of the kickstart init.lua.\n\n  Next, run AND READ `:help`.\n    This will open up a help window with some basic information\n    about reading, navigating and searching the builtin help documentation.\n\n    This should be the first place you go to look when you're stuck or confused\n    with something. It's one of my favorite Neovim features.\n\n    MOST IMPORTANTLY, we provide a keymap \"<space>sh\" to [s]earch the [h]elp documentation,\n    which is very useful when you're not exactly sure of what you're looking for.\n\n  I have left several `:help X` comments throughout the init.lua\n    These are hints about where to find more information about the relevant settings,\n    plugins or Neovim features used in Kickstart.\n\n   NOTE: Look for lines like this\n\n    Throughout the file. These are for you, the reader, to help you understand what is happening.\n    Feel free to delete them once you know what you're doing, but they should serve as a guide\n    for when you are first encountering a few different constructs in your Neovim config.\n\nIf you experience any errors while trying to install kickstart, run `:checkhealth` for more info.\n\nI hope you enjoy your Neovim journey,\n- TJ\n\nP.S. You can delete this when you're done too. It's your config now! :)\n--]]"], false], [["alias tmux=\"TERM=screen-256color-bce tmux\"\n"], true], [["set -g focus-events on\nset -g status-style bg=default\nset -g status-left '#(cat #{socket_path}-\\#{session_id}-vimbridge)'\nset -g status-left-length 90\nset -g status-right '#(cat #{socket_path}-\\#{session_id}-vimbridge-R)'\nset -g status-right-length 90\nset -g status-justify centre"], false]], "#": [["/home/niraj/.config/nvim-bak/lua/plugins/ui/lualine.lua"], false], "\"": [["  local function read_project(data)\n    local res = {}\n    data = string.gsub(data, '%z', '')\n    local dump = assert(loadstring(data))\n    local list = dump()\n    if list then\n      list = vim.list_slice(list, #list - config.project.limit)\n    end\n    for _, dir in ipairs(list or {}) do\n      dir = dir:gsub(vim.env.HOME, '~')\n      table.insert(res, (' '):rep(3) .. '\uf401 ' .. dir)\n    end\n\n    if #res == 0 then\n      table.insert(res, (' '):rep(3) .. '\uf401 empty project')\n    else\n      reverse(res)\n    end\n\n    table.insert(res, 1, config.project.icon .. config.project.label)\n    table.insert(res, 1, '')\n    table.insert(res, '')\n    return res\n  end"], false], "-": [[","], false]}, "history": {"1": {"num": 40, "items": {"13": "q", "27": "wq", "39": "w", "40": "qa"}}, "2": {"num": 11, "items": {"2": "plugin", "3": "plugins", "4": "gpu'=", "6": "gpu", "8": "color", "9": "theme", "10": "data", "11": "outline"}}, "3": {"num": 0, "items": {}}, "4": {"num": 0, "items": {}}, "5": {"num": 0, "items": {}}}, "last_search_pattern": "outline", "last_search_pattern_command": "nv_vi_slash"}